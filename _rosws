#compdef rosws

zstyle ':completion::complete:rosws:*:descriptions' format '%B%d%b'
zstyle ':completion::complete:rosws:*:commands' group-name commands
zstyle ':completion::complete:rosws:*:workspaces_list' group-name workspaces_list
zstyle ':completion::complete:rosws::' list-grouped

zmodload zsh/mapfile

function _rosws() {
  local ROSWS_CONFIG=${ROSWS_CONFIG:-$HOME/.config/ros2-env/workspaces}
  local ret=1

    local -a workspaces_list
  workspaces_list=( ${(f)"$(< $ROSWS_CONFIG)"} )
  # Format output to be a bit prettier
  for ((i = 1; i <= $#workspaces_list; i++))
  do
    workspaces_list[$i]=$(sed 's/:/ --> /2g' <<<"$workspaces_list[$i]")
  done

  local -a ros_distros=(
    ardent
    bouncy
    crystal
    dashing
    eloquent
    foxy
    galactic
    humble
    iron
    jazzy
    rolling
  )

  local -a ros_dds_vendors=(
    rmw_fastrtps_cpp
    rmw_cyclonedds_cpp
    rmw_zenoh_cpp
  )

  typeset -A rosws_workspaces
  while read -r line
  do
    local arr=(${(s,:,)line})
    ws_name=${arr[1]}
    ws_distro=${arr[2]}
    ws_path=${arr[-1]}

    # replace ~ from path to fix completion (#17)
    ws_path=${ws_path/#\~/$HOME}

    rosws_workspaces[$ws_name]=$ws_path
  done < $ROSWS_CONFIG

  local -a commands=(
    'activate:Set the given workspace as the active one'
    'distro:Set and source the given ROS 2 distro (humble, iron, rolling, etc.)'
    'domain:Set and source the given ROS DOMAIN ID'
    'dds:Set and source the given ROS 2 DDS vendor (rmw_fastrtps_cpp, rmw_cyclonedds_cpp, rmw_zenoh_cpp, etc.)'
    'add:Adds the current working directory to your registered workspaces'
    'rm:Removes the given workspace'
    'list:Print all registered workspaces'
    'show:Print info of given workspace (name and path)'
    'path:Show the path to given workspace (pwd)'
    'clean:Remove workspaces pointing to non-existent directories (will prompt unless --force is used)'
    'cd:Change directory to the workspace. You can also cd to a dir inside the workspace'
    'help:Show this extremely helpful text'
  )

  _arguments -C \
    '1: :->first_arg' \
    '2: :->second_arg' \
    '3: :->third_arg' \
    '*: :->rem_args' \
  && ret=0

  local command=$words[2]
  local ws_name=$words[3]

  case $state in
    first_arg)
      _describe -t workspaces_list "Workspaces" workspaces_list && ret=0
      _describe -t commands "Commands" commands && ret=0
      ;;
    second_arg)
      case $command in
        add\!|rm)
          _describe -t rosws_workspaces "Workspaces" workspaces_list && ret=0
          ;;
        add)
          _message 'Write the name of your workspace' && ret=0
          ;;
        activate)
          _describe -t rosws_workspaces "Workspaces" workspaces_list && ret=0
          ;;
        distro)
          _describe -t ros_distros "ROS 2 Distros" ros_distros && ret=0
          ;;
        domain)
          _message 'Write the ROS DOMAIN ID beetween 0 and 250' && ret=0
          ;;
        dds)
          _describe -t ros_dds_vendors "Suggested ROS 2 DDS Vendors" ros_dds_vendors && ret=0
          ;;
        show)
          _describe -t rosws_workspaces "Workspaces" workspaces_list && ret=0
          ;;
        path)
          _describe -t rosws_workspaces "Workspaces" workspaces_list && ret=0
          ;;
        cd)
          _describe -t rosws_workspaces "Workspaces" workspaces_list && ret=0
          ;;
      esac
      ;;
    third_arg)
      case $command in
        add)
          _describe -t ros_distros "ROS 2 Distros" ros_distros && ret=0
          ;;
        cd)
          # Autocomplete directories with cd command if workspace is valid
          if [[ -v rosws_workspaces[$ws_name] ]]; then
            # complete sub directories from the workspace
            _path_files -W "(${rosws_workspaces[$ws_name]})" -/ && ret=0
          fi
          ;;
      esac
      ;;
    rem_args)
      case $command in
        add)
          _path_files -/ && ret=0
      ;;
      esac
  esac

  return $ret
}

_rosws "$@"
